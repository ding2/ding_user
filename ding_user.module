<?php
/**
 * @file
 * Ding user handling module.
 */

/**
 * Index used in sessions to implement logged in use session expire possible.
 */
define('DING_USER_ACTIVITY', 'DING_USER_LAST_ACTIVITY');

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugin_example/panels are used.
 */
function ding_user_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implement hook_ctools_plugin_api().
 *
 * If you do this, CTools will pick up default panels pages in
 * <modulename>.pages_default.inc
 */
function ding_user_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_menu().
 */
function ding_user_menu() {
  $items = array();

  $items['user/%user/authenticate'] = array(
    'title' => 'Authenticate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_user_authenticate_form'),
    'access callback' => 'ding_user_access',
    'access arguments' => array(1),
    'file' => 'ding_user.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function ding_user_menu_alter(&$items) {
  // Hook in authentication handling to the regular user edit page.
  // But don't if page_manager overrides it.
  if (!module_exists('page_manager') || variable_get('page_manager_user_edit_disabled', TRUE)) {
    if (isset($items['user/%user/edit']) && $items['user/%user/edit']['page callback'] == 'drupal_get_form') {
      /**
       * @TODO: Are there any sites not running panels and will this work with
       *        profile2 ?
       */
      $items['user/%user/edit']['page callback'] = 'ding_provider_get_form';
    }
  }

  $items['user/%user/view']['title'] = t('User profile');
  $items['user/%user/edit']['title'] = t('Edit user profile');
  $items['user/%pm_arg/status']['title'] = t('User status');
}


/**
 * Implements hook_page_manager_contexts_alter().
 *
 * This is actually a Panels everywhere hook. In future it may be renamed:
 * hook_panels_everywhere_contexts_alter()
 *
 * Panels everywhere puts a extra form tag around the whole page on some pages.
 * This is wrong because there already is a form tag which creates an illegal html markup
 * with nested form tag.
 *
 * This happens because Panels Everwhere reuses code from panels. Because there exist a form in
 * contexts the function function panels_render_display() puts an extra form around the code.
 *
 * The code unsets the form_id in panels everywhere module order to supress the superfluous form tag
 * See Panels module: function panels_render_display()
 *
 */
function ding_user_page_manager_contexts_alter(&$contexts, $placeholders) {
  foreach ($contexts as $id => $context) {
    if (!empty($context->form_id)) {
      unset($context->form_id);
    }
  }
}


/**
 * Implements hook_entity_info_alter().
 *
 * Add new view mode used mainly to display the reservation lists in the users
 * profile (not profile2).
 */
function ding_user_entity_info_alter(&$entity_info) {
  $ding_entity_info = ding_entity_info('ding_entity');
  // Entity might not be defined yet (is the case in the installer).
  if (isset($entity_info[$ding_entity_info['entity_type']]['view modes'])) {
    // Add a user_list display mode for addon modules to use.
    $entity_info[$ding_entity_info['entity_type']]['view modes'] += array(
      'user_list' => array(
        'label' => t('User lists'),
        'custom settings' => TRUE,
      ),
    );
  }
}

/**
 * Access callback.
 *
 * Allows access if the account is the same as the logged in user.
 */
function ding_user_access($account) {
  return ($GLOBALS['user']->uid == $account->uid) && user_is_logged_in();
}

/**
 * Implements hook_form_alter().
 *
 * Modify user login form to use our backend and changes the form fields types
 * to password.
 */
function ding_user_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      $form['name']['#type'] = 'password';
      // Add our own validation handler, after the default Drupal login
      // validator.
      $pos = array_search('user_login_authenticate_validate', $form['#validate']);
      if ($pos === FALSE) {
        // Not found, insert as next to last.
        $pos = sizeof($form['#validate']) - 1;
      }
      else {
        // After, not before.
        $pos += 1;
      }
      array_splice($form['#validate'], $pos, 0, 'ding_user_user_login_validate');

    // Falling through on purpose.
    case 'ding_user_authenticate_form':
      if (isset($form_state['ajaxify'])) {
        $form['actions']['submit']['#ajax'] = array(
          'callback' => 'ding_user_authenticate_form_callback',
          'wrapper' => drupal_html_id($form_id),
        );
      }
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add setting for pin code length under admin/config/people/accounts, which
 * defaults to 4 as most libraries uses that length.
 *
 * Also add option to set session expire time.
 */
function ding_user_form_user_admin_settings_alter(&$form, &$form_state, $form_id) {
  $form['ding_user'] = array(
    '#type' => 'fieldset',
    '#title' => t('Provider user settings'),
    '#weight' => -1,
    '#tree' => FALSE,
  );

  $form['ding_user']['ding_user_pincode_length'] = array(
    '#type' => 'radios',
    '#title' => t('Pin code length'),
    '#options' => array(
      4 => t('Max @number chars', array('@number' => 4)),
      5 => t('Max @number chars', array('@number' => 5)),
    ),
    '#default_value' => ding_user_get_pincode_length,
  );

  // Create time interval to set cache expire.
  $period = drupal_map_assoc(array(0, 60, 180, 300, 600, 900, 1800, 2700, 3600, 10800, 21600, 32400, 43200, 86400), 'format_interval');
  $period[0] = '<' . t('none') . '>';
  $form['ding_user']['ding_user_session_expire'] = array(
    '#type' => 'select',
    '#title' => t('Session timeout'),
    '#default_value' => variable_get('ding_user_session_expire', 900),
    '#options' => $period,
    '#description' => t('Uses that have not been active for this period will be automatically logged out.'),
  );
}

/**
 * Helper function to get the pincode length from the administration UI.
 *
 * @return int $length
 *  The length of the pincode, if not set it will return 4.
 */
function ding_user_get_pincode_length() {
  return variable_get('ding_user_pincode_length', 4);;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add pincode fields to the provider profile(s), so the users can change their
 * library pincode.
 */
function ding_user_form_profile2_form_alter(&$form, &$form_state) {
  global $user;
  if (ding_user_is_provider_user($user)) {
    // Check that it's the provider profile we are looking at.
    $provider = _ding_provider_get_provider('user');
    $provider_profile_type = 'provider_' . $provider['module'];
    if ($form_state['profile2']->type == $provider_profile_type) {
      // Add pincode change field.
      $maxlength = ding_user_get_pincode_length();
      $form['pincode'] = array(
        '#type' => 'password_confirm',
        '#size' => $maxlength,
        '#maxlength' => $maxlength,
        '#process' => array(
          'form_process_password_confirm',
          // Not adding user_form_process_password_confirm here, as it only adds
          // the strength checker, which we don't want.
          'ding_user_form_process_password_confirm',
        ),
        '#description' => t('To change the current pincode, enter the new pincode in both fields.'),
      );

      // Add submit handler to change the pincode as it's not part of the profile
      // fields.
      $form['#submit'][] = 'ding_user_profile_update_submit';
    }
  }
}

/**
 * Password confirm element process.
 *
 * Add in handling of #maxlength and change the titles of the fields.
 */
function ding_user_form_process_password_confirm($element) {
  if (!empty($element['#maxlength'])) {
    $element['pass1']['#maxlength'] = $element['pass2']['#maxlength'] = $element['#maxlength'];
    // Unset #maxlength, or _form_validate will attempt to check the length of
    // this element, whose value will be an array.
    unset($element['#maxlength']);
  }
  unset($element['#maxlength']);

  // Fixup the titles.
  $element['pass1']['#title'] = t('Pincode');
  $element['pass2']['#title'] = t('Confirm pincode');

  return $element;
}

/**
 * Updates the users pincode as part of the profile update. It's done in this
 * submit function as the pincode is not part of provider profile and this
 * esures that it never in any way get stored in the DB.
 *
 * Furthermore the pincode fields are injected into the profile form in the form
 * alter above as there is not password field available, that would not store it
 * in the database.
 *
 * @global type $user
 * @param type $form
 * @param type $form_state
 */
function ding_user_profile_update_submit(&$form, &$form_state) {
  $pincode = isset($form_state['values']['pincode']) ? $form_state['values']['pincode'] : '';
  // If pincode is not empty, it's changed.
  if (!empty($pincode)) {
    global $user;
    try {
      $update_res = ding_provider_invoke('user', 'update_pincode', $user, $pincode);
      if (!empty($update_res['creds'])) {
        // Updated drupal credational
        ding_user_save_creds($update_res);
      }
    }
    catch (Exception $exception) {
      // If update_account fails, we're in trouble, as we're too far in to
      // set form errors. So we'll just tell the user that it couldn't be, and
      // not save the fields.
      drupal_set_message(t("There was a problem communicating with library system. Please contact the site administrator."), 'error');
      watchdog_exception('ding_user', $exception);
      drupal_set_message(t("New pincode not saved."), 'error');
    }
  }
}

/**
 * Get the provider profile for the given user.
 */
function ding_user_provider_profile($account) {
  $provider = _ding_provider_get_provider('user');
  $provider_profile_type = 'provider_' . $provider['module'];

  return profile2_load_by_user($account, $provider_profile_type);
}

/**
 * Implements hook_username_alter().
 *
 * @TODO: This do not work with the display name moved into the profile2
 *        provider profile. Maybe change it to use real name module ?
 *        Look at ding_user_update_user().
 *
 * @TODO: This is called 6-7 times on the admin edit user page ?
 *
 * Use display_name.
 */
function ding_user_username_alter(&$name, $account) {
  if (isset($account->data)) {
    if (is_string($account->data)) {
      $data = unserialize($account->data);
    }
    else {
      $data = $account->data;
    }

    if (!empty($data) && isset($data['display_name'])) {
      $name = $data['display_name'];
    }
  }
}

/**
 * Implements hook_ding_provider_user().
 */
function ding_user_ding_provider_user() {
  return array(
    'user' => array(
      'required' => TRUE,
      'install time setup' => TRUE,
    ),
  );
}

/**
 * Return the page to redirect user to in order to authenticate/log
 * in. Used by ding_provider.
 */
function ding_user_auth_page() {
  global $user;
  if (user_is_logged_in()) {
    return 'user/' . $user->uid . '/authenticate';
  }
  return 'user/login';
}

/**
 * Return a local hash for the given name.
 *
 * As logins may be CPR numbers, which is really sensitive information, we use
 * a hash of the name and the Drupal private key as authname.
 */
function ding_user_default_authname($name) {
  // If another password.inc is in use, that doesn't define
  // _password_base64_encode(), we'll fail horribly. We'll probably need to
  // define our own base64 function, but we'll cross that bridge when we reach
  // it.
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
  /**
   * A sha512 is 64 bytes, which becomes 128 hexadecimal chars, which is
   * exactly the size of the authname field in the database. So we ask hash
   * for binary data and lets _password_base64_encode base64 encode it to 86
   * characters, leaving enough room for our suffix.
   */
  $hash = hash('sha512', drupal_get_private_key() . $name, TRUE);
  return _password_base64_encode($hash, strlen($hash)) . '@ding_user';
}

/**
 * Custom validator for the login form.
 *
 * Handles authentication with provider, and setting up a profile2 for the
 * user/provider.
 */
function ding_user_user_login_validate($form, &$form_state) {
  // If $form_state['uid'] is set and has a true value, Drupal already found a
  // user, so we don't bother. Also, we require name and pass.
  if (isset($form_state['uid']) && $form_state['uid'] || empty($form_state['values']['name']) || empty($form_state['values']['pass'])) {
    // Normal Drupal user have been logged in.
    return;
  }
  try {
    // Trying to login the user using the provider.
    $auth_res = ding_provider_invoke('user', 'authenticate', $form_state['values']['name'], $form_state['values']['pass']);
    if (!is_array($auth_res) || !isset($auth_res['success'])) {
      watchdog('ding_user', 'Provider returned invalid result: @res', array('@res' => print_r($auth_res, TRUE)), WATCHDOG_DEBUG);
      return;
    }

    if ($auth_res['success']) {
      if (isset($auth_res['authname']) && !empty($auth_res['authname'])) {
        // If provider supplied an authname, use it.
        $auth_name = $auth_res['authname'];
      }
      else {
        // Else use a standard authname.
        $auth_name = ding_user_default_authname($form_state['values']['name']);
      }

      $account = _ding_user_create_account($auth_name, $auth_res);

      // Check that a profile exists for the user and if not create one.
      _ding_user_create_profile2($account);

      // Log user in.
      $form_state['uid'] = $account->uid;
      // We're not calling user_login_submit like user_external_login_register
      // does, it's already the submit handler.
      /**
       *  @TODO: Do we still need this ?
       */
      if (ding_provider_implements('user', 'authenticate_finalize')) {
        ding_provider_invoke('user', 'authenticate_finalize', $account);
      }
    }
    else {
      if (isset($auth_res['messages'])) {
        foreach ($auth_res['messages'] as $message) {
          $type = 'warning';
          if (is_array($message)) {
            list($message, $type) = $message;
          }
          drupal_set_message(check_plain($message), $type);
        }
      }
    }
  } catch (DingProviderException $exception) {
    // Exception thrown, log error and carry on.
    watchdog_exception('ding_user', $exception);
  }
}

/**
 * Create a provider account for drupal. Username will be a hashvalue of authname.
 * This account will be coupled with the provider user via the authmap table
 *
 * @param string $auth_name
 *  Name used to authenticate the user.
 * @param array $auth_res
 *  Authentication information from the provider.
 */
function _ding_user_create_account($auth_name, $auth_res) {
  // We'd like to use user_external_login_register(), but it saves the user
  // and invokes hook_user_login before we have a chance to mess with it. So
  // we do what it would do.
  $account = user_external_load($auth_name);
  if (!$account) {
    // Register this new user.
    $userinfo = array(
      // Name is only 60 chars, and authname is longer. Use a shorter SHA1
      // hash.
      'name' => hash('sha1', $auth_name),
      'pass' => user_password(),
      'init' => $auth_name,
      'status' => 1,
      'access' => REQUEST_TIME,
      'mail' => '',
    );

    if (isset($auth_res['user'])) {
      $userinfo['mail'] = $auth_res['user']['mail'];
      $userinfo['data'] = array('display_name' => $auth_res['user']['data']['display_name']);
    }

    $account = user_save(drupal_anonymous_user(), $userinfo);
    // Terminate if an error occurred during user_save().
    if (!$account) {
      watchdog('ding_user', t("User account could not be created for: %name."), array('%name' => $auth_res['user']['data']['display_name']), WATCHDOG_ERROR);
      drupal_set_message(t("Error saving user account."), 'error');
      return;
    }
    user_set_authmaps($account, array("authname_ding_user" => $auth_name));
  }
  else {
    // Update display name and mail address as they may have been change in the
    // library system.
    $edit = array();
    $edit['mail'] = $auth_res['user']['mail'];
    $edit['data'] = array('display_name' => $auth_res['user']['data']['display_name']);
    user_save($account, $edit);
  }

  // Save credentials in the session.
  ding_user_save_creds($auth_res);

  return $account;
}

/**
 * Implements hook_profile2_access().
 *
 * Only allows logged in users to see profile2 tabs and only there own tabs and
 * also only if the user is logged in through a ding provider.
 *
 */
function ding_user_profile2_access($op, $profile = NULL, $account = NULL) {
  if (user_is_logged_in() && ($GLOBALS['user']->uid === $profile->uid)) {
    if (empty($profile) || ding_user_is_provider_user($profile)) {
      // This disables the tabs in the user profile and as we never want the
      // user to user the path... but only the panels extension. This will be
      // okay for now.
      return FALSE;
    }
    else {
      $provider = _ding_provider_get_provider('user');
      $provider_profile_type = 'provider_' . $provider['module'];
      if ($provider_profile_type == $profile->type) {
        // Don't show provider profile to no provider user eiter.
        return FALSE;
      }
      // Show all other profiles.
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Create a profile2 provider profile for the account, if one do not exists.
 *
 * @param entity $account
 *  Drupal user account object.
 * @return entity $profile
 *  The newly create profile or the existing one.
 */
function _ding_user_create_profile2($account) {
  $profile = ding_user_provider_profile($account);
  if (!$profile) {
    // Load profile2 type
    $provider = _ding_provider_get_provider('user');
    $profile_type = profile2_type_load('provider_' . $provider['module']);

    // Create a profile for current user.
    $profile = new Profile(
      array(
        'user' => $account,
        'type' => $profile_type,
      )
    );

    // Bind this profile to the user.
    $profile->save();
  }
  return $profile;
}

/**
 * Implements hook_forms().
 *
 * Enables the profile2 form panels pane to generate a form for a profile2
 * enity. The code is largely taken from the profile2 page module, but we only
 * which this part of the module.
 */
function ding_user_forms($form_id, $args) {
  // For efficiency, only act if the third argument is 'profile2'.
  if (isset($args[2]) && is_string($args[2]) && $args[2] == 'profile2') {
    // Reuse profile2 page extension code.
    include_once drupal_get_path('module', 'profile2') . '/contrib/profile2_page.inc';

    $info = entity_get_info('profile2');
    // Translate bundle form ids to the base form id 'profile2_form'.
    $forms = array();
    foreach ($info['bundles'] as $bundle => $bundle_info) {
      $forms['profile2_edit_' . $bundle . '_form']['callback'] = 'profile2_form';
      $forms['profile2_edit_' . $bundle . '_form']['wrapper callback'] = 'entity_ui_form_defaults';
    }
    return $forms;
  }
}

/**
 * Ajax command to authenticate. Used by ding_provider.
 */
function ajax_command_ding_user_authenticate($extra_data) {
  global $user, $language;
  // @todo add support for user/login here.
  module_load_include('inc', 'ding_user', 'ding_user.pages');
  if ($user->uid) {
    $title = t('Authenticate');
    $form_id = 'ding_user_authenticate_form';
  }
  else {
    $title = t('Login');
    $form_id = 'user_login';
  }

  // Change default ajax action to default login form's if https is enabled.
  if (variable_get('https', FALSE)) {
    $form = drupal_get_form('user_login');
    $url = parse_url($_SERVER['HTTP_REFERER']);
    $path_start = strpos($_SERVER['HTTP_REFERER'], '/', drupal_strlen($url['scheme']) + 3);
    $referer = drupal_substr($_SERVER['HTTP_REFERER'], $path_start + 1);
    // Filter out any language prefixes as it will be automatically added to the URL again.
    if (!empty($language->language) && preg_match('/' . $language->prefix . '/', $referer) > 0) {
      $referer = preg_replace('/' . $language->prefix . '\//', '', $referer);
    }
    $form['#action'] = 'https://' . $_SERVER['SERVER_NAME'] . url('user/login') . '?destination=' . $referer;
  }
  else {
    $form_state = array(
      'ajaxify' => TRUE,
    );
    $form = drupal_build_form($form_id, $form_state);
  }

  $login_form = drupal_render($form);
  return ajax_command_ding_popup('ding_user', $title, $login_form, array('resubmit' => TRUE, 'extra_data' => $extra_data));
}

/**
 * Ajax callback.
 */
function ding_user_authenticate_form_callback($form, &$form_state) {
  switch ($form['form_id']['#value']) {
    case 'ding_user_authenticate_form':
      $success = $form_state['authentication_success'];
      break;
    case 'user_login':
      $success = !empty($form_state['uid']);
      break;
  }

  $response = array(
    '#type' => 'ajax',
    '#commands' => array(),
  );
  if ($success) {
    // Close dialog if successful.
    $response['#commands'][] = ajax_command_ding_popup_close('ding_user');
  }
  else {
    // Else redisplay form and messages.
    $html = theme('status_messages') . drupal_render($form);
    $response['#commands'][] = ajax_command_ding_popup('ding_user', t('Authenticate'), $html);
  }

  return $response;
}

/**
 * Retrives the users credentials from the current session.
 *
 * @param type $user
 *  A user object. The the current logged in user will be used if non is given.
 * @return type
 *  Array with the user credentials.
 * @throws DingProviderAuthException
 *  Throws DingProviderAuthException if not authenticated.
 */
function ding_user_get_creds($user = NULL) {
  if (is_null($user)) {
    global $user;
  }

  if (user_is_logged_in()) {
    // Sometimes the $user object will be the users profile which do not have
    // roles.
    if (isset($user->roles)) {
      $timeout = variable_get('ding_user_session_expire', 900);
      $roles = array_values($user->roles);
      // User who are authenticated but has no other roles (i.e. ding user)
      if (sizeof($roles) == 1 && $roles[0] == 'authenticated user' && $timeout != 0) {
        // Check if session is expired.
        if (isset($_SESSION[DING_USER_ACTIVITY]) && (time() - $_SESSION[DING_USER_ACTIVITY] > variable_get('ding_user_session_expire', 900))) {
          watchdog('user', 'Session timeout for %name.', array('%name' => $user->name));
          user_module_invoke('logout', $user, 'user');

          session_destroy();

          $user = drupal_anonymous_user();
          drupal_set_message(t('Your session has timed out.', array(), array('context' => 'ding_user')));
          drupal_goto();
        }
      }
    }
  }

  if (isset($_SESSION['ding_user'])) {
    // User has not timed out and is logged in, so update timestamp and
    // return credentials.
    $_SESSION[DING_USER_ACTIVITY] = time();
    return $_SESSION['ding_user']['creds'];
  }

  throw new DingProviderAuthException;
}

/**
 * Store user credentials in the current session.
 *
 * @param array $auth_res
 *  Array with authentication information used to communicate with the provider.
 */
function ding_user_save_creds($auth_res) {
  if (isset($auth_res['creds'])) {
    $_SESSION[DING_USER_ACTIVITY] = time();
    $_SESSION['ding_user'] = $auth_res;
  }
}

/**
 * Check if the given account is a user authenticated through a provider.
 */
function ding_user_is_provider_user($account) {
  $names = &drupal_static(__FUNCTION__);
  if (!isset($names)) {
    $names = db_select('authmap')
      ->fields('authmap', array('authname'))
      ->condition('module', 'ding_user')
      ->condition('uid', $account->uid)
      ->execute()->fetchAll();
  }
  return !empty($names);
}

include_once('ding_user_comments.inc');
